import telebot
import requests
from telebot import types
import buttons as bt
import pandas as pd

bot = telebot.TeleBot('6793497603:AAEC2ZQ3uaiHafyd6lnyJIbUDvM9WRo7SWU')

list1 = ["USD", "EUR", "RUB", "KZT", "JPY", "GBP", "CHF"]
list2 = ["–î–æ–ª–ª–∞—Ä –°–®–ê", "–ï–≤—Ä–æ", "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ", "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤",
         "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫"]
list3 = ["USD", "EUR", "RUB", "KZT", "JPY"]

user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.first_name
    bot.send_message(user_id, f"""–ü—Ä–∏–≤–µ—Ç {username}! –≠—Ç–æ –±–æ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç –ø–æ –∫—É—Ä—Å—É NBU.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""", reply_markup=bt.main_kb())


def send_currencies_info(message):
    try:
        info = get_currencies_info()
        bot.send_message(message.chat.id, f"<pre>{info}</pre>", parse_mode='HTML')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())


def get_currency(message):
    user_id = message.from_user.id
    currency_name = message.text[:3].upper()
    response = requests.get("https://nbu.uz/exchange-rates/json/")
    currencies = response.json()
    check_currency = [currency["code"] for currency in currencies]

    if currency_name in check_currency:
        for currency in currencies:
            if currency["code"] == currency_name:
                name = currency["title"]
                value = currency["cb_price"]
                user_data[user_id] = {'currency_name': currency_name, 'value': value}
                bot.send_message(user_id, f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å: 1 {currency_name} = {value} UZS.",
                                 reply_markup=bt.back_or_convert())
                bot.register_next_step_handler(message, handle_back_or_convert)
                break
    else:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ.")

def handle_back_or_convert(message):
    user_id = message.from_user.id
    if message.text == "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Äüí±":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=bt.select_value())
    elif message.text == "–ù–∞–∑–∞–¥üîô":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())


def handle_conversion(message, direction):
    user_id = message.from_user.id
    sum_str = message.text
    currency_name = user_data[user_id]['currency_name']
    value = user_data[user_id]['value']

    try:
        sum_float = float(sum_str)
        value_float = float(value)

        if direction == "from_uzs":
            converted_value = sum_float / value_float
        elif direction == "to_uzs":
            converted_value = sum_float * value_float

        converted_value_round = round(converted_value, 2)
        if direction == "from_uzs":
            bot.send_message(user_id, f"–°—É–º–º–∞ –≤ {sum_float} UZS = {converted_value_round} –≤ {currency_name}")
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())
        elif direction == "to_uzs":
            bot.send_message(user_id, f"–°—É–º–º–∞ –≤ {sum_float} {currency_name} = {converted_value_round} UZS")
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())

    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —á–∏—Å–ª–∞—Ö –∏–ª–∏ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö (–ù–∞–ø—Ä–∏–º–µ—Ä: 0.1) ")
        bot.register_next_step_handler(message, lambda msg: handle_conversion(msg, direction))


@bot.message_handler(content_types=['text'])
def main_menu(message):
    user_id = message.from_user.id
    if message.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –¶–ëüè¶":
        bot.send_message(user_id, f"""–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–µ –∫—É—Ä—Å –¶–ë:
"USD" - "–î–æ–ª–ª–∞—Ä –°–®–ê" üá∫üá∏
"EUR" - "–ï–≤—Ä–æ" üá™üá∫
"JPY" - "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞" üáØüáµ
"KZT" - "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ" üá∞üáø
"KRW" - "–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∏–π –≤–æ–Ω" üá∞üá∑
"PLN" - "–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π" üáµüá±
"RUB" - "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å" üá∑üá∫
"TRY" - "–ù–æ–≤–∞—è –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞" üáπüá∑
"AED" - "–î–∏—Ä—Ö–∞–º –û–ê–≠" üá¶üá™
"UAH" - "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞" üá∫üá¶
"CNY" - "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å" üá®üá≥
"CAD" - "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä" üá®üá¶
"AUD" - "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä" üá¶üá∫
"CHF" - "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫" üá®üá≠
"DKK" - "–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞" üá©üá∞
"EGP" - "–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π —Ñ—É–Ω—Ç" üá™üá¨
"GBP" - "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤" üá¨üáß
"ISK" - "–ò—Å–ª–∞–Ω–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞" üáÆüá∏
"KWD" - "–ö—É–≤–µ–π—Ç—Å–∫–∏–π –¥–∏–Ω–∞—Ä" üá∞üáº
"LBP" - "–õ–∏–≤–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç" üá±üáß
"MYR" - "–ú–∞–ª–∞–π–∑–∏–π—Å–∫–∏–π —Ä–∏–Ω–≥–≥–∏—Ç" üá≤üáæ
"NOK" - "–ù–æ—Ä–≤–µ–∂—Å–∫–∞—è –∫—Ä–æ–Ω–∞" üá≥üá¥
"SEK" - "–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞" üá∏üá™
"SGD" - "–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä" üá∏üá¨ """, reply_markup=bt.currency_kb())
        bot.register_next_step_handler(message, get_currency)
    elif message.text == "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç üí∏":
        send_currencies_info(message)
    elif message.text == "–ü–æ–∫—É–ø–∫–∞üìà":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=bt.buy_kb())
    elif message.text == "–ü—Ä–æ–¥–∞–∂–∞üìâ":
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=bt.cell_kb())


def get_currencies_info():
    data = []
    date = ""

    response = requests.get("https://nbu.uz/exchange-rates/json/")
    currency_list = response.json()

    for currency in currency_list:
        if currency["code"] in list3:
            title = currency["title"]
            nbu_cell_price = currency["nbu_cell_price"] if currency["nbu_cell_price"] is not None else "N/A"
            nbu_buy_price = currency["nbu_buy_price"] if currency["nbu_buy_price"] is not None else "N/A"
            data.append([title, nbu_cell_price, nbu_buy_price])
            date = currency["date"]

    df = pd.DataFrame(data, columns=["–í–∞–ª—é—Ç–∞ ", "–ü–æ–∫—É–ø–∫–∞", "–ü—Ä–æ–¥–∞–∂–∞"])
    df["–ü—Ä–æ–¥–∞–∂–∞"] = pd.to_numeric(df["–ü—Ä–æ–¥–∞–∂–∞"], errors='coerce')
    df = df.sort_values(by="–ü—Ä–æ–¥–∞–∂–∞", ascending=False)

    result = ""
    result += f"{'–í–∞–ª—é—Ç–∞':^20} {'–ü–æ–∫—É–ø–∫–∞':^10} {' –ü—Ä–æ–¥–∞–∂–∞':^10}\n"
    result += "-" * 43 + "\n"

    for _, row in df.iterrows():
        title, nbu_cell_price, nbu_buy_price = row
        result += f"{title:^20} {nbu_cell_price:^11} {nbu_buy_price:^10}\n"

    result += "\n–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞: " + date
    return result



@bot.callback_query_handler(func=lambda call: call.data in list1)
def get_buy_currency(call):
    user_id = call.from_user.id
    response = requests.get("https://nbu.uz/exchange-rates/json/")
    currencies = response.json()
    check_currency = [currency["code"] for currency in currencies]

    if call.data in check_currency:
        for currency in currencies:
            if currency["code"] == call.data:
                bot.delete_message(user_id, call.message.message_id)
                name = currency["title"]
                value = currency["nbu_cell_price"]
                bot.send_message(user_id, f"""–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏.
1 {name} = {value} UZS.""")
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())
                break
    else:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ :(")


@bot.callback_query_handler(func=lambda call: call.data in list2)
def get_cell_currency(call):
    user_id = call.from_user.id
    response = requests.get("https://nbu.uz/exchange-rates/json/")
    currencies = response.json()
    check_currency = [currency["title"] for currency in currencies]

    if call.data in check_currency:
        for currency in currencies:
            if currency["title"] == call.data:
                bot.delete_message(user_id, call.message.message_id)
                name = currency["title"]
                value = currency["nbu_buy_price"]
                bot.send_message(user_id, f"""–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏.
1 {name} = {value} UZS.""")
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=bt.main_kb())
                break
    else:
        bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ :(")


@bot.callback_query_handler(func=lambda call: call.data in ["from_uzs", "to_uzs"])
def handle_conversion_direction(call):
    user_id = call.from_user.id
    direction = call.data
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    bot.register_next_step_handler(call.message, lambda msg: handle_conversion(msg, direction))
    bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id, reply_markup=None)


if __name__ == '__main__':
    bot.polling(non_stop=True)
